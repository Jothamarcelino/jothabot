import time
import random
import datetime
import streamlit as st
from utils import responder_usuario, registrar_pergunta_nao_respondida
import pandas as pd

# --- Cursos e Metadados ---
courses = {
    "Curso T√©cnico em Alimentos": "alimentos",
    "Curso T√©cnico em Agroind√∫stria (Integrado)": "agroind√∫stria_integrado_ao_ensino_m√©dio_barbacena",
    "Curso T√©cnico em Agropecu√°ria (Integrado)": "agropecu√°ria_integrad",
    "Curso T√©cnico em Hospedagem (Integrado)": "hospedagem_integrado_ao_ensino_m√©dio_barbacena",
    "Curso T√©cnico em Qu√≠mica (Integrado)": "qu√≠mica_integrad",
    "Curso T√©cnico em Enfermagem": "enfermagem",
    "Curso T√©cnico em Inform√°tica": "inform√°tica",
    "Curso T√©cnico em Meio Ambiente": "meio_ambiente",
    "Curso T√©cnico em Seguran√ßa do Trabalho": "seguran√ßa_do_trabalho",
    "Curso Superior em Administra√ß√£o": "administra√ß√£o",
    "Curso Superior em Agronomia": "agronomia",
    "Curso de Ci√™ncias Biol√≥gicas (Licenciatura)": "ci√™ncias_biol√≥gicas",
    "Curso de Qu√≠mica (Licenciatura)": "qu√≠mica",
    "Curso de Educa√ß√£o F√≠sica (Licenciatura)": "educa√ß√£o_f√≠sica",
    "Curso em Gest√£o Ambiental": "gest√£o_ambiental",
    "Curso em Gest√£o de Turismo": "gestao_de_turismo",
    "Curso Superior em Nutri√ß√£o": "nutri√ß√£o",
    "Curso Superior em Alimentos (Tecn√≥logo)": "tecnologia_em_alimentos"
}

def get_welcome_message():
    h = datetime.datetime.now().hour
    if h < 12:
        return random.choice([
            "‚òÄÔ∏è Bom dia, explorador do est√°gio! Pronto para novas descobertas? Eu sou o JOTHA, seu guia de campo!",
            "üåû Ol√°, mestre das manh√£s! JOTHA por aqui para te ajudar com tudo sobre seu est√°gio.",
            "üòÑ Seja bem-vindo ao universo do est√°gio! Eu sou o JOTHA e as aventuras matinais come√ßam agora!"
        ])
    if h < 18:
        return random.choice([
            "üå§Ô∏è Boa tarde, futuro profissional de sucesso! Eu sou o JOTHA, pronto pra te ajudar no que for preciso.",
            "üìö Ol√°! JOTHA na √°rea! Preparado pra mais um cap√≠tulo da sua jornada de est√°gio?",
            "üíº Boa tarde! Vamos colocar os conhecimentos em pr√°tica juntos? O JOTHA te acompanha nessa miss√£o!"
        ])
    return random.choice([
        "üåô Boa noite, guerreiro do conhecimento! Eu sou o JOTHA, e ainda d√° tempo de brilhar no est√°gio!",
        "ü¶â Noite produtiva por aqui? Eu sou o JOTHA, sempre acordado para te ajudar com o est√°gio!",
        "üí° A luz do conhecimento nunca se apaga... e eu tamb√©m n√£o! Boa noite, sou o JOTHA!"
    ])

# --- Configura√ß√£o & CSS ---
st.set_page_config(page_title="JOTHA 2.0", layout="wide", initial_sidebar_state="collapsed")
st.markdown("""
<style>
  body { background-color: #f9f9f9; }
  [data-testid="stChatMessage"][data-testid-chat-message-type="user"] {
    background-color:#ffebcc!important; text-align:right; border-radius:8px!important; padding:8px!important;
  }
  [data-testid="stChatMessage"][data-testid-chat-message-type="assistant"] {
    background-color:#ffffff!important; text-align:left; border-radius:8px!important; padding:8px!important;
  }
</style>
""", unsafe_allow_html=True)
# --- Sidebar de Gerenciamento ---
st.sidebar.image("https://bit.ly/jotha-aberto", width=100)
st.sidebar.markdown("### üìä Painel de Gerenciamento")
senha = st.sidebar.text_input("üîê Senha do painel:", type="password")
acesso_autorizado = senha == st.secrets["admin"]["acesso"]

# --- Session State Defaults ---
st.session_state.setdefault("welcome_shown", False)
st.session_state.setdefault("curso", None)
st.session_state.setdefault("curso_exibido", None)
st.session_state.setdefault("chat_history", [])

# --- 1) Sauda√ß√£o + digita√ß√£o + pergunta de curso (apenas uma vez) ---
if not st.session_state.welcome_shown:
    with st.spinner("JOTHA est√° digitando‚Ä¶"):
        time.sleep(1)

    st.session_state.chat_history.append({
        "role": "assistant",
        "content": get_welcome_message()
    })
    st.session_state.chat_history.append({
        "role": "assistant",
        "content": "Para come√ßarmos, qual o seu curso? üéì"
    })
    st.session_state.welcome_shown = True

# --- 2) Se ainda n√£o escolheu curso: renderiza hist√≥rico + select + confirm e para ---
if st.session_state.curso is None:
    for msg in st.session_state.chat_history:
        quem = "user" if msg["role"] == "user" else "assistant"
        with st.chat_message(quem):
            st.markdown(msg["content"], unsafe_allow_html=True)

    escolha = st.selectbox("Selecione seu curso", list(courses.keys()))
    if st.button("Confirmar"):
        st.session_state.curso = courses[escolha]
        st.session_state.curso_exibido = escolha
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": f"√ìtimo! Voc√™ escolheu **{escolha}**. Vamos l√°! üöÄ"
        })
        # segue a execu√ß√£o para o pr√≥ximo bloco
    else:
        st.stop()

# --- 3) Curso definido: receber pergunta e registrar no hist√≥rico ANTES do loop ---
pergunta = st.chat_input("")
if pergunta:
    st.session_state.chat_history.append({"role": "user", "content": pergunta})
    resposta, encontrado = responder_usuario(pergunta)
    st.session_state.chat_history.append({"role": "assistant", "content": resposta})
    if not encontrado:
        registrar_pergunta_nao_respondida(pergunta)
    # o pr√≥prio chat_input dispara o rerun, ent√£o n√£o precisamos de st.experimental_rerun()


# --- 4) Exibe todo hist√≥rico (1 √∫nico loop) ---
for msg in st.session_state.chat_history:
    quem = "user" if msg["role"] == "user" else "assistant"
    with st.chat_message(quem):
        st.markdown(msg["content"], unsafe_allow_html=True)

# --- 5) Mudar curso + Sidebar de n√£o-respondidas ---
col1, col2 = st.columns([4, 1])
with col1:
    st.markdown(f"**Curso selecionado:** {st.session_state.curso_exibido}")
with col2:
    if st.button("üîÑÔ∏è Mudar curso"):
        for k in ("welcome_shown", "curso", "curso_exibido", "chat_history"):
            st.session_state.pop(k, None)
        st.stop()


if acesso_autorizado:
    st.sidebar.markdown("---")
    st.sidebar.subheader("üì• Perguntas n√£o respondidas")
    try:
        df = pd.read_csv("data/nao_respondido.csv")
        st.sidebar.dataframe(df, use_container_width=True)
        csv = df.to_csv(index=False).encode("utf-8")
        st.sidebar.download_button("üìÅ Baixar nao_respondido.csv", csv, "nao_respondido.csv", "text/csv")
    except FileNotFoundError:
        st.sidebar.info("Nenhuma pergunta registrada.")

st.markdown("""
<style>
.footer {
    position: fixed;
    left: 0;
    bottom: 0;
    width: 100%;
    background-color: #f9f9f9;
    text-align: center;
    font-size: 0.8em;
    color: #666;
    padding: 10px 0;
    border-top: 1px solid #ddd;
    z-index: 100;
}
</style>
<div class="footer">
‚ö†Ô∏è O JOTHA √© um assistente IA. As respostas podem conter imprecis√µes.
</div>
""", unsafe_allow_html=True)
